//----------------------------------------------
//
//        Sketch Generated by Visuino
//              www.visuino.com
//          Version 7.8.3.11
//
//----------------------------------------------

#define VISUINO_ARDUINO_UNO

#include <OpenWire.h>
#include <Mitov.h>
#include <Mitov_StandardSerial.h>
#include <Wire.h>
#include <Mitov_Basic_I2C.h>
#include <Mitov_LiquidCrystalDisplay_I2C.h>

// Shared Component Member Variables

namespace ComponentVariables
{
class
{
public:
  uint32_t Value1 : 5;
  uint32_t Value2 : 2;

} BitFields;

class Variable1
{
public:
  inline static uint32_t GetValue() { return BitFields.Value1; }
  inline static void SetValue( uint32_t AValue ) { BitFields.Value1 = AValue; }

};
class Variable2
{
public:
  inline static uint32_t GetValue() { return BitFields.Value2; }
  inline static void SetValue( uint32_t AValue ) { BitFields.Value2 = AValue; }

};
} // ComponentVariables

// Pin Call Declarations

namespace PinCalls
{
class PinCallerReceive0
{
public:
  void Notify( void *_Data );

};
} // PinCalls

// Arduino Board Declarations

namespace BoardDeclarations
{
Mitov::SerialPort<
  SERIAL_TYPE, // 0_T_TYPE
  Serial, // 1_C_TYPE
  Mitov::ConstantProperty<9, uint32_t, 0 >, // AfterSendingDelay
  Mitov::ConstantProperty<2, uint32_t, 8 >, // DataBits
  Mitov::ConstantProperty<8, bool, true >, // Enabled
  Mitov::ConstantProperty<51, uint32_t, 0>, // FEndTime
  Mitov::ConstantProperty<50, bool, false>, // FSending
  Mitov::GenericPin_EmbeddedPinImplementation<5, ::PinCalls::PinCallerReceive0 >, // OutputPin
  Mitov::ConstantProperty<1, Mitov::TArduinoStandardSerialParity, Mitov::spNone >, // Parity
  Mitov::DigitalPin_NoImplementation<7 >, // SendingOutputPin
  Mitov::ConstantProperty<4, uint32_t, 9600 >, // Speed
  Mitov::ConstantProperty<3, uint32_t, 1 > // StopBits
   > SerialPort0;

} // BoardDeclarations

// Declarations

namespace Declarations
{
Mitov::LiquidCrystalDisplay<
  Mitov::LiquidCrystalDisplayI2C<
    TwoWire, // 0_TYPE_PIN
    Wire, // 1_NAME_PIN
    39, // Address
    Mitov::ConstantProperty<14, bool, false >, // AutoScroll
    Mitov::ConstantProperty<4, bool, true >, // Backlight
    Mitov::ConstantProperty<3, bool, true >, // BacklightPositive
    Mitov::ConstantProperty<17, bool, false >, // Blink
    Mitov::ConstantProperty<13, bool, true >, // Enabled
    Mitov::ConstantProperty<18, bool, false >, // Hight10Pixels
    Mitov::ConstantProperty<15, bool, false >, // RightToLeft
    Mitov::ConstantProperty<16, bool, false > // ShowCursor
    >, // 0_TYPE
  16, // Columns
  Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable2>, // FCursorLine
  Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable1>, // FCursorPos
  2 // Rows
   > _o_LiquidCrystalDisplay1;

Mitov::LiquidCrystalDisplayCharInput<Mitov::LiquidCrystalDisplay<
  Mitov::LiquidCrystalDisplayI2C<
    TwoWire, // 0_TYPE_PIN
    Wire, // 1_NAME_PIN
    39, // Address
    Mitov::ConstantProperty<14, bool, false >, // AutoScroll
    Mitov::ConstantProperty<4, bool, true >, // Backlight
    Mitov::ConstantProperty<3, bool, true >, // BacklightPositive
    Mitov::ConstantProperty<17, bool, false >, // Blink
    Mitov::ConstantProperty<13, bool, true >, // Enabled
    Mitov::ConstantProperty<18, bool, false >, // Hight10Pixels
    Mitov::ConstantProperty<15, bool, false >, // RightToLeft
    Mitov::ConstantProperty<16, bool, false > // ShowCursor
    >, // 0_TYPE
  16, // Columns
  Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable2>, // FCursorLine
  Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable1>, // FCursorPos
  2 // Rows
   >, _o_LiquidCrystalDisplay1> LiquidCrystalDisplay1_InputChar_1;
} // Declarations

// Type Converters

namespace TypeConverters
{
Mitov::Convert_BinaryBlockToChar Converter0;
} // TypeConverters

// Pin Call Declarations

namespace PinCalls
{
void PinCallerConverterReceive1( void *_Data );
} // PinCalls

// Pin Call Implementations

namespace PinCalls
{
void PinCallerReceive0::Notify( void *_Data )
{
  TypeConverters::Converter0.Convert( _Data, PinCallerConverterReceive1 );
}

void PinCallerConverterReceive1( void *_Data )
{
  Declarations::LiquidCrystalDisplay1_InputChar_1.InputPin_o_Receive( _Data );
}
} // PinCalls

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  Wire.begin();

  BoardDeclarations::SerialPort0.SystemInit();
  Declarations::_o_LiquidCrystalDisplay1.SystemInit();

  OpenWire::SystemStarted();
}

// The loop function is called in an endless loop
void loop()
{
  BoardDeclarations::SerialPort0.SystemLoopBegin();
  BoardDeclarations::SerialPort0.SystemLoopBeginOutput();
}